# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, login_name: str=None, display_name: str=None, type: str=None, broadcaster_type: str=None, description: str=None, profile_image_url: str=None, offline_image_url: str=None, email: str=None):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: str
        :param login_name: The login_name of this User.  # noqa: E501
        :type login_name: str
        :param display_name: The display_name of this User.  # noqa: E501
        :type display_name: str
        :param type: The type of this User.  # noqa: E501
        :type type: str
        :param broadcaster_type: The broadcaster_type of this User.  # noqa: E501
        :type broadcaster_type: str
        :param description: The description of this User.  # noqa: E501
        :type description: str
        :param profile_image_url: The profile_image_url of this User.  # noqa: E501
        :type profile_image_url: str
        :param offline_image_url: The offline_image_url of this User.  # noqa: E501
        :type offline_image_url: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        """
        self.swagger_types = {
            'id': str,
            'login_name': str,
            'display_name': str,
            'type': str,
            'broadcaster_type': str,
            'description': str,
            'profile_image_url': str,
            'offline_image_url': str,
            'email': str
        }

        self.attribute_map = {
            'id': 'id',
            'login_name': 'loginName',
            'display_name': 'displayName',
            'type': 'type',
            'broadcaster_type': 'broadcasterType',
            'description': 'description',
            'profile_image_url': 'profileImageUrl',
            'offline_image_url': 'offlineImageUrl',
            'email': 'email'
        }
        self._id = id
        self._login_name = login_name
        self._display_name = display_name
        self._type = type
        self._broadcaster_type = broadcaster_type
        self._description = description
        self._profile_image_url = profile_image_url
        self._offline_image_url = offline_image_url
        self._email = email

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def login_name(self) -> str:
        """Gets the login_name of this User.


        :return: The login_name of this User.
        :rtype: str
        """
        return self._login_name

    @login_name.setter
    def login_name(self, login_name: str):
        """Sets the login_name of this User.


        :param login_name: The login_name of this User.
        :type login_name: str
        """

        self._login_name = login_name

    @property
    def display_name(self) -> str:
        """Gets the display_name of this User.


        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this User.


        :param display_name: The display_name of this User.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def type(self) -> str:
        """Gets the type of this User.


        :return: The type of this User.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this User.


        :param type: The type of this User.
        :type type: str
        """

        self._type = type

    @property
    def broadcaster_type(self) -> str:
        """Gets the broadcaster_type of this User.


        :return: The broadcaster_type of this User.
        :rtype: str
        """
        return self._broadcaster_type

    @broadcaster_type.setter
    def broadcaster_type(self, broadcaster_type: str):
        """Sets the broadcaster_type of this User.


        :param broadcaster_type: The broadcaster_type of this User.
        :type broadcaster_type: str
        """

        self._broadcaster_type = broadcaster_type

    @property
    def description(self) -> str:
        """Gets the description of this User.


        :return: The description of this User.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this User.


        :param description: The description of this User.
        :type description: str
        """

        self._description = description

    @property
    def profile_image_url(self) -> str:
        """Gets the profile_image_url of this User.


        :return: The profile_image_url of this User.
        :rtype: str
        """
        return self._profile_image_url

    @profile_image_url.setter
    def profile_image_url(self, profile_image_url: str):
        """Sets the profile_image_url of this User.


        :param profile_image_url: The profile_image_url of this User.
        :type profile_image_url: str
        """

        self._profile_image_url = profile_image_url

    @property
    def offline_image_url(self) -> str:
        """Gets the offline_image_url of this User.


        :return: The offline_image_url of this User.
        :rtype: str
        """
        return self._offline_image_url

    @offline_image_url.setter
    def offline_image_url(self, offline_image_url: str):
        """Sets the offline_image_url of this User.


        :param offline_image_url: The offline_image_url of this User.
        :type offline_image_url: str
        """

        self._offline_image_url = offline_image_url

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email
