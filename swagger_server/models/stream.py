# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Stream(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, user_id: str=None, user_name: str=None, game_id: str=None, type: str=None, title: str=None, viewer_count: int=None, started_at: str=None, language: str=None, thumbnail_url: str=None):  # noqa: E501
        """Stream - a model defined in Swagger

        :param id: The id of this Stream.  # noqa: E501
        :type id: str
        :param user_id: The user_id of this Stream.  # noqa: E501
        :type user_id: str
        :param user_name: The user_name of this Stream.  # noqa: E501
        :type user_name: str
        :param game_id: The game_id of this Stream.  # noqa: E501
        :type game_id: str
        :param type: The type of this Stream.  # noqa: E501
        :type type: str
        :param title: The title of this Stream.  # noqa: E501
        :type title: str
        :param viewer_count: The viewer_count of this Stream.  # noqa: E501
        :type viewer_count: int
        :param started_at: The started_at of this Stream.  # noqa: E501
        :type started_at: str
        :param language: The language of this Stream.  # noqa: E501
        :type language: str
        :param thumbnail_url: The thumbnail_url of this Stream.  # noqa: E501
        :type thumbnail_url: str
        """
        self.swagger_types = {
            'id': str,
            'user_id': str,
            'user_name': str,
            'game_id': str,
            'type': str,
            'title': str,
            'viewer_count': int,
            'started_at': str,
            'language': str,
            'thumbnail_url': str
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'userId',
            'user_name': 'userName',
            'game_id': 'gameId',
            'type': 'type',
            'title': 'title',
            'viewer_count': 'viewerCount',
            'started_at': 'startedAt',
            'language': 'language',
            'thumbnail_url': 'thumbnailUrl'
        }
        self._id = id
        self._user_id = user_id
        self._user_name = user_name
        self._game_id = game_id
        self._type = type
        self._title = title
        self._viewer_count = viewer_count
        self._started_at = started_at
        self._language = language
        self._thumbnail_url = thumbnail_url

    @classmethod
    def from_dict(cls, dikt) -> 'Stream':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Stream of this Stream.  # noqa: E501
        :rtype: Stream
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Stream.


        :return: The id of this Stream.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Stream.


        :param id: The id of this Stream.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Stream.


        :return: The user_id of this Stream.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Stream.


        :param user_id: The user_id of this Stream.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def user_name(self) -> str:
        """Gets the user_name of this Stream.


        :return: The user_name of this Stream.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this Stream.


        :param user_name: The user_name of this Stream.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def game_id(self) -> str:
        """Gets the game_id of this Stream.


        :return: The game_id of this Stream.
        :rtype: str
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id: str):
        """Sets the game_id of this Stream.


        :param game_id: The game_id of this Stream.
        :type game_id: str
        """

        self._game_id = game_id

    @property
    def type(self) -> str:
        """Gets the type of this Stream.


        :return: The type of this Stream.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Stream.


        :param type: The type of this Stream.
        :type type: str
        """

        self._type = type

    @property
    def title(self) -> str:
        """Gets the title of this Stream.


        :return: The title of this Stream.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Stream.


        :param title: The title of this Stream.
        :type title: str
        """

        self._title = title

    @property
    def viewer_count(self) -> int:
        """Gets the viewer_count of this Stream.


        :return: The viewer_count of this Stream.
        :rtype: int
        """
        return self._viewer_count

    @viewer_count.setter
    def viewer_count(self, viewer_count: int):
        """Sets the viewer_count of this Stream.


        :param viewer_count: The viewer_count of this Stream.
        :type viewer_count: int
        """

        self._viewer_count = viewer_count

    @property
    def started_at(self) -> str:
        """Gets the started_at of this Stream.


        :return: The started_at of this Stream.
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at: str):
        """Sets the started_at of this Stream.


        :param started_at: The started_at of this Stream.
        :type started_at: str
        """

        self._started_at = started_at

    @property
    def language(self) -> str:
        """Gets the language of this Stream.


        :return: The language of this Stream.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this Stream.


        :param language: The language of this Stream.
        :type language: str
        """

        self._language = language

    @property
    def thumbnail_url(self) -> str:
        """Gets the thumbnail_url of this Stream.


        :return: The thumbnail_url of this Stream.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url: str):
        """Sets the thumbnail_url of this Stream.


        :param thumbnail_url: The thumbnail_url of this Stream.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url
